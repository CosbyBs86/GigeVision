<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GigeVision.Core</name>
    </assembly>
    <members>
        <member name="F:GigeVision.Core.Enums.CameraStatus.Available">
            <summary>
            Camera Available in network and its not in Control/Streaming
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.CameraStatus.InControl">
            <summary>
            Camera available in network and its in control
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.CameraStatus.UnAvailable">
            <summary>
            Camera not found in network
            </summary>
        </member>
        <member name="T:GigeVision.Core.Enums.GvcpRegister">
            <summary>
            They are fixed GigeVision Registers
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_SUCCESS">
            <summary>
            Command executed successfully
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_PACKET_RESEND">
            <summary>
            Only applies to packet being resent. This flag is preferred over the GEV_STATUS_SUCCESS
            when the GVSP transmitter sends a resent packet. This can be used by a GVSP receiver to
            better monitor packet resend.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_NOT_IMPLEMENTED">
            <summary>
            Command is not supported by the device
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_INVALID_PARAMETER">
            <summary>
            At least one parameter provided in the command is invalid (or out of range) for the device
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_INVALID_ADDRESS">
            <summary>
            An attempt was made to access a non existent address space location.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_WRITE_PROTECT">
            <summary>
            The addressed register cannot be written to
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_BAD_ALIGNMENT">
            <summary>
            A badly aligned address offset or data size was specified.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_ACCESS_DENIED">
            <summary>
            An attempt was made to access an address location which is currently/momentary not
            accessible. This depends on the current state of the device, in particular the current
            privilege of the application.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_BUSY">
            <summary>
            A required resource to service the request is not currently available. The request may
            be retried at a later time.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_LOCAL_PROBLEM">
            <summary>
            An internal problem in the device implementation occurred while processing the request.
            Optionally the device provides a mechanism for looking up a detailed description of the
            problem. (Log files, Event log, ‘Get last error’ mechanics). This error is intended to
            report problems from underlying services (operating system, 3rd party library) in the
            device to the client side without translating every possible error code into a GigE
            Vision equivalent.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_MSG_MISMATCH">
            <summary>
            Message mismatch (request and acknowledge do not match)
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_INVALID_PROTOCOL">
            <summary>
            This version of the GVCP protocol is not supported
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_NO_MSG">
            <summary>
            Timeout, no message received
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_PACKET_UNAVAILABLE">
            <summary>
            The requested packet is not available anymore.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_DATA_OVERRUN">
            <summary>
            Internal memory of GVSP transmitter overrun (typically for image acquisition)
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_INVALID_HEADER">
            <summary>
            The message header is not valid. Some of its fields do not match the specification.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_WRONG_CONFIG">
            <summary>
            The device current configuration does not allow the request to be executed due to
            parameters consistency issues.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_PACKET_NOT_YET_AVAILABLE">
            <summary>
            The requested packet has not yet been acquired. Can be used for linescan cameras device
            when line trigger rate is slower than application timeout.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_PACKET_AND_PREV_REMOVED_FROM_MEMORY">
            <summary>
            The requested packet and all previous ones are not available anymore and have been
            discarded from the GVSP transmitter memory. An application associated to a GVSP receiver
            should not request retransmission of these packets again.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_PACKET_REMOVED_FROM_MEMORY">
            <summary>
            The requested packet is not available anymore and has been discarded from the GVSP
            transmitter memory. However, applications associated to GVSP receivers can still
            continue using their internal resend algorithm on earlier packets that are still
            outstanding. This does not necessarily indicate than any previous data is actually
            available, just that the application should not just assume everything earlier is no
            longer available.
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.GvcpStatus.GEV_STATUS_ERROR">
             <summary>
            Generic error. Try to avoid and use a more descriptive status code from list above.
             </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono8">
            <summary>
            GVSP_PIX_MONO8
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono8Signed">
            <summary>
            GVSP_PIX_MONO8_SIGNED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGR8">
            <summary>
            GVSP_PIX_BAYGR8
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerRG8">
            <summary>
            GVSP_PIX_BAYRG8
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGB8">
            <summary>
            GVSP_PIX_BAYGB8
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerBG8">
            <summary>
            GVSP_PIX_BAYBG8
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono10Packed">
            <summary>
            GVSP_PIX_MONO10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono12Packed">
            <summary>
            GVSP_PIX_MONO12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGR10Packed">
            <summary>
            GVSP_PIX_BAYGR10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerRG10Packed">
            <summary>
            GVSP_PIX_BAYRG10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGB10Packed">
            <summary>
            GVSP_PIX_BAYGB10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerBG10Packed">
            <summary>
            GVSP_PIX_BAYBG10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGR12Packed">
            <summary>
            GVSP_PIX_BAYGR12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerRG12Packed">
            <summary>
            GVSP_PIX_BAYRG12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGB12Packed">
            <summary>
            GVSP_PIX_BAYGB12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerBG12Packed">
            <summary>
            GVSP_PIX_BAYBG12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono10">
            <summary>
            GVSP_PIX_MONO10
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono12">
            <summary>
            GVSP_PIX_MONO12
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono16">
            <summary>
            GVSP_PIX_MONO16
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGR10">
            <summary>
            GVSP_PIX_BAYGR10
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerRG10">
            <summary>
            GVSP_PIX_BAYRG10
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGB10">
            <summary>
            GVSP_PIX_BAYGB10
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerBG10">
            <summary>
            GVSP_PIX_BAYBG10
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGR12">
            <summary>
            GVSP_PIX_BAYGR12
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerRG12">
            <summary>
            GVSP_PIX_BAYRG12
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGB12">
            <summary>
            GVSP_PIX_BAYGB12
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerBG12">
            <summary>
            GVSP_PIX_BAYBG12
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.Mono14">
            <summary>
            GVSP_PIX_MONO14
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGR16">
            <summary>
            GVSP_PIX_BAYGR16
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerRG16">
            <summary>
            GVSP_PIX_BAYRG16
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerGB16">
            <summary>
            GVSP_PIX_BAYGB16
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BayerBG16">
            <summary>
            GVSP_PIX_BAYBG16
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.YUV411Packed">
            <summary>
            GVSP_PIX_YUV411_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.YUV422Packed">
            <summary>
            GVSP_PIX_YUV422_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.YUYVPacked">
            <summary>
            GVSP_PIX_YUV422_YUYV_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB565Packed">
            <summary>
            GVSP_PIX_RGB565_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BGR565Packed">
            <summary>
            GVSP_PIX_BGR565_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB8Packed">
            <summary>
            GVSP_PIX_RGB8_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BGR8Packed">
            <summary>
            GVSP_PIX_BGR8_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.YUV444Packed">
            <summary>
            GVSP_PIX_YUV444_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB8Planar">
            <summary>
            GVSP_PIX_RGB8_PLANAR
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGBA8Packed">
            <summary>
            GVSP_PIX_RGBA8_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BGRA8Packed">
            <summary>
            GVSP_PIX_BGRA8_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB10V1Packed">
            <summary>
            GVSP_PIX_RGB10V1_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB10V2Packed">
            <summary>
            GVSP_PIX_RGB10V2_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB12V1Packed">
            <summary>
            GVSP_PIX_RGB12V1_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB10Packed">
            <summary>
            GVSP_PIX_RGB10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BGR10Packed">
            <summary>
            GVSP_PIX_BGR10_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB12Packed">
            <summary>
            GVSP_PIX_RGB12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.BGR12Packed">
            <summary>
            GVSP_PIX_BGR12_PACKED
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB10Planar">
            <summary>
            GVSP_PIX_RGB10_PLANAR
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB12Planar">
            <summary>
            GVSP_PIX_RGB12_PLANAR
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB16Planar">
            <summary>
            GVSP_PIX_RGB16_PLANAR
            </summary>
        </member>
        <member name="F:GigeVision.Core.Enums.PixelFormat.RGB16Packed">
            <summary>
            GVSP_PIX_RGB16_PACKED
            </summary>
        </member>
        <member name="P:GigeVision.Core.Interfaces.IGvcp.ElapsedOneSecond">
            <summary>
            It can be for any thing, to update fps to check devices
            </summary>
        </member>
        <member name="P:GigeVision.Core.Interfaces.IGvcp.CameraIpChanged">
            <summary>
            This event will be fired when camera ip is changed
            </summary>
        </member>
        <member name="P:GigeVision.Core.Interfaces.IGvcp.CameraIp">
            <summary>
            Camera IP
            </summary>
        </member>
        <member name="P:GigeVision.Core.Interfaces.IGvcp.PortControl">
            <summary>
            Controlling port for GVCP
            </summary>
        </member>
        <member name="P:GigeVision.Core.Interfaces.IGvcp.IsKeepingAlive">
            <summary>
            Bool to keep the heartbeat of Gige Camera alive
            </summary>
        </member>
        <member name="P:GigeVision.Core.Interfaces.IGvcp.RegistersDictionary">
            <summary>
            Dictionary for registers
            </summary>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.Net.Sockets.UdpClient,System.Byte[],System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the specified socket
            </summary>
            <param name="socket">Socket already connected with the camera IP</param>
            <param name="registerAddress">Address of register [4 hex bytes]</param>
            <param name="valueToWrite">Value to write on register</param>
            <returns></returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.Net.Sockets.UdpClient,System.String,System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the specified socket
            </summary>
            <param name="socket">Socket already connected with the camera IP</param>
            <param name="registerAddress">
            Address of register [Hex string "0x014578a0", "14578a0" both format are valid]
            </param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.String,System.Byte[],System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the specified IP, take control first
            then leave the control
            </summary>
            <param name="Ip">Camera IP</param>
            <param name="registerAddress">Address of register [4 hex bytes]</param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.String,System.String,System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the specified IP, take control first
            then leave the control
            </summary>
            <param name="Ip">Camera IP</param>
            <param name="registerAddress">
            Address of register [Hex string "0x014578a0", "14578a0" both format are valid]
            </param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.Byte[],System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the specified IP, take control first
            then leave the control
            </summary>
            <param name="registerAddress">Address of register [4 hex bytes]</param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.String,System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the IP that is supposed to be already
            assigned then leave the control
            </summary>
            <param name="registerAddress">Address of register [4 hex bytes]</param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.Net.Sockets.UdpClient,System.String[],System.UInt32[])">
            <summary>
            Write Register: it will send the GVCP command to the specified socket
            </summary>
            <param name="socket">Socket already connected with the camera IP</param>
            <param name="registerAddress">
            Address of register array [Hex string "0x014578a0", "14578a0" both format are valid]
            </param>
            <param name="valuesToWrite">Values to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.String,System.String[],System.UInt32[])">
            <summary>
            Write Register: it will send the GVCP command to the specified IP, take control first
            then leave the control
            </summary>
            <param name="Ip">Camera IP</param>
            <param name="registerAddress">
            Address of register [Hex string "0x014578a0", "14578a0" both format are valid]
            </param>
            <param name="valuesToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.String[],System.UInt32[])">
            <summary>
            Write Register: it will send the GVCP command to the IP that is supposed to be already
            assigned then leave the control
            </summary>
            <param name="registerAddress">Address of register [4 hex bytes]</param>
            <param name="valuesToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(GigeVision.Core.Enums.GvcpRegister,System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the IP that is supposed to be already
            assigned then leave the control
            </summary>
            <param name="register">Fixed GigE registers</param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.WriteRegisterAsync(System.String,GigeVision.Core.Enums.GvcpRegister,System.UInt32)">
            <summary>
            Write Register: it will send the GVCP command to the specified IP, take control first
            assigned then leave the control
            </summary>
            <param name="Ip">Camera IP</param>
            <param name="register">Fixed GigE registers</param>
            <param name="valueToWrite">Value to write on register</param>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.ForceIPAsync(System.Byte[],System.String)">
            <summary>
            Forces the IP of camera to be changed to the given IP
            </summary>
            <param name="macAddress">MAC address of the camera</param>
            <param name="iPToSet">IP of camera that needs to be set</param>
            <returns>Success Status</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.ForceIPAsync(System.String,System.String)">
            <summary>
            Forces the IP of camera to be changed to the given IP
            </summary>
            <param name="macAddress">MAC address of the camera</param>
            <param name="iPToSet">IP of camera that needs to be set</param>
            <returns>Success Status</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.GetAllGigeDevicesInNetworkAsnyc">
            <summary>
            It will broadcast discovery command and get all the available devices in the network
            </summary>
            <returns>List of Camera Information</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.CheckCameraStatusAsync(System.String)">
            <summary>
            Check camera status
            </summary>
            <param name="ip">Ip Camera</param>
            <returns>Camera Status: Available/Incontrol or Unavailable</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.CheckCameraStatusAsync">
            <summary>
            Check camera status
            </summary>
            <returns>Camera Status: Available/Incontrol or Unavailable</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.TakeControl(System.Boolean)">
            <summary>
            Take control of camera
            </summary>
            <param name="KeepAlive">If true it will keep the heartbeat alive</param>
            <returns>Control Status</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvcp.LeaveControl">
            <summary>
            It will leave the control of the camera CCP=0
            </summary>
            <returns>Leave Status</returns>
        </member>
        <member name="M:GigeVision.Core.Interfaces.IGvsp.StartStreamAsync(System.String,System.Int32)">
            <summary>
            This method will get current PC IP and Gets the Camera ip from Gvcp
            </summary>
            <param name="rxIP">If rxIP is not provided, method will detect system IP and use it</param>
            <param name="rxPort">It will set randomly when not provided</param>
            <returns></returns>
        </member>
        <member name="T:GigeVision.Core.Models.Gvcp">
            <summary>
            Max GVCP payload = 540 bytes and must be multiple of 32
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.Gvcp.ElapsedOneSecond">
            <summary>
            It can be for any thing, to update fps to check devices
            </summary>
        </member>
        <member name="M:GigeVision.Core.Models.Gvcp.SendUdp(System.Net.Sockets.UdpClient,System.Byte[],System.Boolean,System.String)">
            <summary>
            This function will send udp packet to the socket (ip/port)
            </summary>
            <param name="socket"></param>
            <param name="inputCommand"></param>
            <param name="replySize"></param>
            <returns></returns>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.Error">
            <summary>
            Error to display if any
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.IPSender">
            <summary>
            IP address of the sender
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.IsSent">
            <summary>
            Command sent
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.IsSentAndReplyReceived">
            <summary>
            Command Sent and camera replied
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.PortSender">
            <summary>
            Sending Port
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.Reply">
            <summary>
            Raw reply packet
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.RegisterValue">
            <summary>
            Register value
            </summary>
        </member>
        <member name="P:GigeVision.Core.Models.GvcpReply.RegisterValues">
            <summary>
            For Multiple register reading
            </summary>
        </member>
        <member name="M:GigeVision.Core.Models.Gvsp.StartStreamAsync(System.String,System.Int32)">
            <summary>
            This method will get current PC IP and Gets the Camera ip from Gvcp
            </summary>
            <param name="rxIP">If rxIP is not provided, method will detect system IP and use it</param>
            <param name="rxPort">It will set randomly when not provided</param>
            <returns></returns>
        </member>
    </members>
</doc>
