<prism:PrismApplication x:Class="GigeVision.Wpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:GigeVision.Wpf"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:enums="clr-namespace:GigeVision.Wpf.Enums"
             xmlns:converters="clr-namespace:GigeVision.Wpf.Converters"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">
    <Application.Resources>

        <!--Converters-->
        <converters:TextBoxReadOnlyConverter x:Key="AccessModeConverter" />
        <converters:CameraRegisterVisibilityConverter x:Key="CameraRegisterVisibilityConverter" />
        <converters:ListCheckConverter x:Key="ListCheckConverter" />
        <converters:EnumerationIndexConverter x:Key="EnumerationIndexConverter" />
        <converters:ValueTypeConverter x:Key="ValueTypeConverter" />
        <converters:StringToUintConverter x:Key="StringToUintConverter" />
        <converters:TreeExpandConverter x:Key="TreeExpandConverter" />
        <converters:FooterVisibilityConverter x:Key="FooterVisibilityConverter" />
        <converters:CheckBoxConverter x:Key="CheckBoxConverter" />

        <!--Enums-->
        <ObjectDataProvider x:Key="CameraRegisterVisibilityList" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="enums:CameraRegisterVisibility" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!--Style-->

        <Style TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style TargetType="xctk:IntegerUpDown">
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="2" />
        </Style>

        <Style TargetType="TextBox">
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="2" />
            <Style.Triggers>
                <Trigger Property="IsReadOnly" Value="True">
                    <Setter Property="Foreground" Value="#555" />
                    <Setter Property="Background" Value="#f5f5f5" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ComboBox">
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="2" />
        </Style>

        <Style TargetType="ComboBoxItem">
            <Setter Property="Width" Value="150" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>

        <Style TargetType="Button">
            <Setter Property="Width" Value="150" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>

        <Style TargetType="DataGrid">
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="BorderBrush" Value="#333" />
            <Setter Property="Margin" Value="0" />
        </Style>

        <!--TreeView Style-->

        <Style  TargetType="TreeView">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeView">
                        <Border Name="Border"  Background="#fff" Margin="0">
                            <ScrollViewer Focusable="False" CanContentScroll="False" Padding="0" Margin="0,0,0,0">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
            <Setter Property="Focusable"  Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid Width="8" Height="8" Background="Transparent">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Expanded">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked" />
                                    <VisualState x:Name="Indeterminate" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path x:Name="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0" Data="M20 38 L20 36 L22 36 L22 34 L20 34 L20 32 L18 32 L18 34 L16 34 L16 36 L18 36 L18 38 Z" Stretch="Uniform">
                                <Path.Fill>
                                    <SolidColorBrush Color="Green" />
                                </Path.Fill>
                            </Path>
                            <Path x:Name="Expanded"  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0" Data="M22 36 L22 34 L16 34 L16 36 Z" Visibility="Hidden" Stretch="Uniform">
                                <Path.Fill>
                                    <SolidColorBrush Color="DarkRed" />
                                </Path.Fill>
                            </Path>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="TreeViewItem">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
            <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}, Mode=FindAncestor}}" />
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeViewItem">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="ExpansionStates">
                                    <VisualState x:Name="Expanded">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Collapsed" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Bd"   Background="#ddd"  BorderThickness="0" Padding="3, 2 , 3 , 2" Margin="0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton Cursor="Hand"  Margin="0 ,0, 3, 0" HorizontalContentAlignment="Left"  Grid.Column="0" x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </Grid>
                            </Border>
                            <DockPanel Grid.Row="1"  HorizontalAlignment="Stretch">

                                <ItemsPresenter x:Name="ItemsHost"  Visibility="Collapsed" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false" />
                                    <Condition Property="Width" Value="Auto" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false" />
                                    <Condition Property="Height" Value="Auto" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Inputs Type Template-->
        <DataTemplate x:Key="InputsTemplate">
            <ContentControl  x:Name="InputType" Content="{Binding}" />
            <!--Register could be either Textbox or Combobox-->
            <DataTemplate.Triggers>

                <!--For Textbox String Type-->
                <DataTrigger Binding="{Binding CameraRegisterContainer.Type, Converter={StaticResource ValueTypeConverter}}" Value="TextBoxString">
                    <Setter Property="ContentTemplate" TargetName="InputType">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox  Grid.Column="1" Text="{Binding CameraRegisterContainer.Register.Value, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="{Binding CameraRegisterContainer.Register.AccessMode, Converter={StaticResource AccessModeConverter}}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="LostFocus">
                                            <i:InvokeCommandAction Command="{Binding SetValueCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <TextBox.InputBindings>
                                        <KeyBinding Key="Return" Command="{Binding SetValueCommand , Mode=OneWay}" />
                                    </TextBox.InputBindings>
                                </TextBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!--For Textbox Integer Type-->
                <DataTrigger Binding="{Binding CameraRegisterContainer.Type, Converter={StaticResource ValueTypeConverter}}" Value="TextBoxInteger">
                    <Setter Property="ContentTemplate" TargetName="InputType">
                        <Setter.Value>
                            <DataTemplate>
                                <xctk:IntegerUpDown x:Name="IntegerUpDown" Grid.Column="1" Minimum="{Binding CameraRegisterContainer.TypeValue.Min}"
                                                                                                Maximum="{Binding CameraRegisterContainer.TypeValue.Max}"
                                                                                                Text="{Binding CameraRegisterContainer.Register.Value, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                                                                                                IsReadOnly="{Binding CameraRegisterContainer.Register.AccessMode, Converter={StaticResource AccessModeConverter}}"
                                                                                                Increment="{Binding CameraRegisterContainer.TypeValue.Inc}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="LostKeyboardFocus" SourceName="IntegerUpDown">
                                            <i:InvokeCommandAction Command="{Binding SetValueCommand}" CommandParameter="{Binding Path=Text, RelativeSource={RelativeSource  AncestorType={x:Type xctk:IntegerUpDown}}}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <xctk:IntegerUpDown.InputBindings>
                                        <KeyBinding Key="Return" Command="{Binding SetValueCommand }" CommandParameter="{Binding Path=Text, RelativeSource={RelativeSource AncestorType={x:Type xctk:IntegerUpDown}}}" />
                                    </xctk:IntegerUpDown.InputBindings>
                                </xctk:IntegerUpDown>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!--For Combobox Type-->
                <DataTrigger Binding="{Binding CameraRegisterContainer.Type, Converter={StaticResource ValueTypeConverter}}" Value="ComboBox">
                    <Setter Property="ContentTemplate" TargetName="InputType">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox Grid.Column="1" ItemsSource="{Binding CameraRegisterContainer.TypeValue.Entry}" DisplayMemberPath="Key"  SelectedValue="{Binding CameraRegisterContainer.Register.Value, UpdateSourceTrigger=PropertyChanged}" SelectedIndex="{Binding Path=Item.CameraRegisterContainer.TypeValue, RelativeSource={RelativeSource AncestorLevel=1,AncestorType=DataGridRow}, Converter={StaticResource EnumerationIndexConverter}, Mode=OneWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <!--<i:InvokeCommandAction Command="{Binding Path=Item.SetValueCommand, RelativeSource={RelativeSource AncestorLevel=2,AncestorType=DataGridRow}, Converter={StaticResource EnumerationIndexConverter}}" />-->
                                            <i:InvokeCommandAction Command="{Binding SetValueCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!--For Command(button) Type-->
                <DataTrigger Binding="{Binding CameraRegisterContainer.Type , Converter={StaticResource ValueTypeConverter}}" Value="Button">
                    <Setter Property="ContentTemplate" TargetName="InputType">
                        <Setter.Value>
                            <DataTemplate>
                                <Button Content="{Binding CameraRegisterContainer.Name}" Command="{Binding SetValueCommand}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!--For Boolean(checkBox) Type-->
                <DataTrigger Binding="{Binding CameraRegisterContainer.Type , Converter={StaticResource ValueTypeConverter}}" Value="Checkbox">
                    <Setter Property="ContentTemplate" TargetName="InputType">
                        <Setter.Value>
                            <DataTemplate>
                                <CheckBox Content="{Binding CameraRegisterContainer.Name}" Command="{Binding SetValueCommand}" CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}, Converter={StaticResource CheckBoxConverter}}"
                                          IsChecked="{Binding CameraRegisterContainer.Register.Value, Converter={StaticResource CheckBoxConverter}}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <Style TargetType="Label">
            <Setter Property="Margin" Value="0" />
            <Setter Property="Padding" Value="0" />
        </Style>

        <!--TreeView Template-->
        <HierarchicalDataTemplate  x:Key="Registers" ItemsSource="{Binding Child}">

            <!--Placeholder for Triggers Conditions-->
            <StackPanel Orientation="Vertical">
                <ContentControl  x:Name="ContentControl" Content="{Binding}" />
            </StackPanel>

            <HierarchicalDataTemplate.Triggers>
                <!--Check if current object  is parent-->

                <!--If parent is true will display its' name only-->
                <DataTrigger Binding="{Binding CameraRegisters, Converter={StaticResource ListCheckConverter}}" Value="False">
                    <Setter Property="ContentTemplate" TargetName="ContentControl">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBlock Text="{Binding Name}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!--If parent is false will display its' registers-->
                <DataTrigger Binding="{Binding CameraRegisters, Converter={StaticResource ListCheckConverter}}" Value="True">
                    <Setter Property="ContentTemplate" TargetName="ContentControl">
                        <Setter.Value>
                            <DataTemplate>
                                <TreeViewItem Header="{Binding Name}">
                                    <DataGrid   AutoGenerateColumns="False"  IsReadOnly="True" HeadersVisibility="None"  ItemsSource="{Binding CameraRegisters, Mode=OneWay}" SelectionMode="Single" SelectedItem="{Binding DataContext.SelectedRegister, RelativeSource={RelativeSource AncestorType=UserControl}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                        <DataGrid.Resources>
                                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#333" />
                                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White" />
                                            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#ccc" />
                                            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="Black" />
                                        </DataGrid.Resources>

                                        <DataGrid.Columns>
                                            <DataGridTextColumn  Binding="{Binding CameraRegisterContainer.Name,Mode=OneWay}" Width="*" />
                                            <DataGridTemplateColumn CellTemplate="{StaticResource InputsTemplate}" Width="150" />
                                        </DataGrid.Columns>
                                        <DataGrid.RowStyle>
                                            <Style TargetType="DataGridRow">
                                                <Setter Property="Visibility">
                                                    <Setter.Value>
                                                        <MultiBinding  Converter="{StaticResource CameraRegisterVisibilityConverter}">
                                                            <Binding Path="CameraRegisterContainer.Visibility" />
                                                            <Binding Path="SelectedItem"  ElementName="VisibilitySelector" />
                                                        </MultiBinding>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </DataGrid.RowStyle>
                                    </DataGrid>
                                </TreeViewItem>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>

        <DataTemplate x:Key="RegisterItem">
            <ContentControl  x:Name="ItemContentControl0" Content="{Binding}" />

            <DataTemplate.Triggers>

                <!--If parent is false will display its' registers-->

                <DataTrigger  Binding="{Binding Child, Converter={StaticResource ListCheckConverter}}" Value="True">
                    <Setter Property="ContentTemplate" TargetName="ItemContentControl0">
                        <Setter.Value>
                            <DataTemplate>
                                <TreeViewItem ItemTemplate="{StaticResource Registers}" Header="{Binding Name}" ItemsSource="{Binding Child}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding CameraRegisters, Converter={StaticResource ListCheckConverter}}" Value="True">
                    <Setter Property="ContentTemplate" TargetName="ItemContentControl0">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel>

                                    <TreeViewItem Header="{Binding Name}">
                                        <DataGrid   AutoGenerateColumns="False"  IsReadOnly="True" HeadersVisibility="None"  ItemsSource="{Binding CameraRegisters, Mode=OneWay}" SelectionMode="Single" SelectedItem="{Binding DataContext.SelectedRegister, RelativeSource={RelativeSource AncestorType=UserControl}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                            <DataGrid.Resources>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#333" />
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White" />
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#ccc" />
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="Black" />
                                            </DataGrid.Resources>
                                            <DataGrid.Columns>
                                                <DataGridTextColumn Binding="{Binding CameraRegisterContainer.Name,Mode=OneWay}" Width="*" />
                                                <DataGridTemplateColumn CellTemplate="{StaticResource InputsTemplate}" Width="150" />
                                            </DataGrid.Columns>
                                            <DataGrid.RowStyle>
                                                <Style TargetType="DataGridRow">
                                                    <Setter Property="Visibility">
                                                        <Setter.Value>
                                                            <MultiBinding  Converter="{StaticResource CameraRegisterVisibilityConverter}">
                                                                <Binding Path="CameraRegisterContainer.Visibility" />
                                                                <Binding Path="SelectedItem"  ElementName="VisibilitySelector" />
                                                            </MultiBinding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </DataGrid.RowStyle>
                                        </DataGrid>
                                    </TreeViewItem>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Child, Converter={StaticResource ListCheckConverter}}" Value="True" />
                        <Condition Binding="{Binding CameraRegisters, Converter={StaticResource ListCheckConverter}}" Value="True" />
                    </MultiDataTrigger.Conditions>

                    <Setter Property="ContentTemplate" TargetName="ItemContentControl0">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel>

                                    <TreeViewItem Header="{Binding Name}">
                                        <TreeView Style="{x:Null}" ItemTemplate="{StaticResource Registers}" ItemsSource="{Binding Child}"
                                                      Background="Transparent"  BorderThickness="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" />
                                        <DataGrid   AutoGenerateColumns="False"  IsReadOnly="True" HeadersVisibility="None"  ItemsSource="{Binding CameraRegisters, Mode=OneWay}" SelectionMode="Single" SelectedItem="{Binding DataContext.SelectedRegister, RelativeSource={RelativeSource AncestorType=UserControl}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                            <DataGrid.Resources>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#333" />
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White" />
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#ccc" />
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="Black" />
                                            </DataGrid.Resources>
                                            <DataGrid.Columns>
                                                <DataGridTextColumn Binding="{Binding CameraRegisterContainer.Name,Mode=OneWay}" Width="*" />

                                                <DataGridTemplateColumn CellTemplate="{StaticResource InputsTemplate}" Width="150" />
                                            </DataGrid.Columns>
                                            <DataGrid.RowStyle>
                                                <Style TargetType="DataGridRow">
                                                    <Setter Property="Visibility">
                                                        <Setter.Value>
                                                            <MultiBinding  Converter="{StaticResource CameraRegisterVisibilityConverter}">
                                                                <Binding Path="CameraRegisterContainer.Visibility" />
                                                                <Binding Path="SelectedItem"  ElementName="VisibilitySelector" />
                                                            </MultiBinding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </DataGrid.RowStyle>
                                        </DataGrid>
                                    </TreeViewItem>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </Application.Resources>
</prism:PrismApplication>